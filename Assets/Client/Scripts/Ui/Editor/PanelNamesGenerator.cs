using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;

using Client.Scripts.Tools.Constants;

using UnityEditor;

using UnityEngine;


namespace Client.Scripts.Ui.Editor
{
    public static class PanelNamesGenerator
    {
        [MenuItem("Utils/Generate Ui Panels Constants")]
        public static void GenerateConstants()
        {
            GeneratePanels();
            GenerateSubPanels();
        }

        private static void GeneratePanels()
        {
            const string header = @"// Generated by PanelNamesGenerator, don't change
namespace Client.Scripts.Ui
{
    public static class Panels
    {";
            const string footer = @"    }
}";

            StringBuilder text = new StringBuilder();

            text.AppendLine(header);

            UiPrefabs config = Resources.Load<UiPrefabs>(ConfigPath.Ui);
            HashSet<string> panelNames = new HashSet<string>();

            foreach (PanelPrefabLink link in config.PanelPrefabLinks)
            {
                text.AppendFormat("        public const string {0} = \"{0}\";\n", link.Id);
                panelNames.Add(link.Id);
            }
            
            text.Append(footer);
            
            File.WriteAllText(Path.Combine(Application.dataPath, "Client/Scripts/Ui/Panels.cs"), text.ToString());
            
            AssetDatabase.Refresh();
        }
        
        private static void GenerateSubPanels()
        {
            const string header = @"// Generated by PanelNamesGenerator, don't change

namespace Client.Scripts.Ui
{
    public static class Subpanels
    {";
            const string footer = @"    }
}";
            
            StringBuilder text = new StringBuilder();

            text.AppendLine(header);

            UiPrefabs config = Resources.Load<UiPrefabs>(ConfigPath.Ui);

            foreach (PanelPrefabLink link in config.SubpanelPrefabLinks)
            {
                text.AppendFormat("        public const string {0} = \"{0}\";\n", link.Id);
            }

            text.Append(footer);
            
            File.WriteAllText(Path.Combine(Application.dataPath, "Client/Scripts/Ui/Subpanels.cs"), text.ToString());
            
            AssetDatabase.Refresh();
        }
    }
    
    public class UiPrefabsAssetModificationProcessor : UnityEditor.AssetModificationProcessor
    {
        private static string[] OnWillSaveAssets(string[] paths)
        {
            foreach (string path in paths)
            {
                if (CheckAsset(path))
                {
                    PanelNamesGenerator.GenerateConstants();
                    break;
                }
            }

            return paths;
        }

        private static bool CheckAsset(string assetPath)
        {
            if (assetPath.Contains(ConfigPath.Ui) && Path.GetExtension(assetPath) == ".asset")
            {
                return true;
            }

            return false;
        }
    }
}