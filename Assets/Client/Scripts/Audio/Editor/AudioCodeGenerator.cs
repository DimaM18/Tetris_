using System.IO;
using System.Text;

using UnityEditor;

using UnityEditorInternal.VersionControl;

using UnityEngine;


namespace Game.Audio.Editor
{
    public static class AudioCodeGenerator
    {
        public static string SoundEffectsPath = "Client/Resources/Audio/SoundEffects";

        [MenuItem("Utils/Generate Audio Constants")]
        public static void GenerateAudioConstants()
        {
            GenerateAudioConstants(false, "");
        }
        
        public static void GenerateAudioConstants(bool isIgnore = false, string ignoreAsset = "")
        {
            string header = @"// Generated by AudioCodeGenerator, don't change
namespace Client.Scripts.Audio
{
    public static class Sounds
    {";
            string foother = @"    }
}";
            
            StringBuilder text = new StringBuilder();

            text.AppendLine(header);
            
            string[] files = Directory.GetFiles(Path.Combine(Application.dataPath, SoundEffectsPath));
            foreach (string file in files)
            {
                if (Path.GetExtension(file) == ".asset")
                {
                    string assetName = Path.GetFileNameWithoutExtension(file);

                    if (isIgnore && assetName == ignoreAsset)
                    {
                        continue;
                    }
                    
                    text.AppendFormat("        public const string {0} = \"{1}\";\n", assetName.Replace(" ", ""), assetName);
                }
            }
            
            text.Append(foother);
            
            File.WriteAllText(Path.Combine(Application.dataPath, "Client/Scripts/Audio/Sounds.cs"), text.ToString());
            
            AssetDatabase.Refresh();
        }
    }
    
    public class SoundEffectsAssetModificationProcessor : UnityEditor.AssetModificationProcessor
    {
        private static void OnWillCreateAsset(string assetName)
        {
            if (CheckAsset(assetName))
            {
                AudioCodeGenerator.GenerateAudioConstants();
            }
        }

        private static AssetDeleteResult OnWillDeleteAsset(string assetName, RemoveAssetOptions options)
        {
            if (CheckAsset(assetName))
            {
                AudioCodeGenerator.GenerateAudioConstants(true, Path.GetFileNameWithoutExtension(assetName));
            }
            
            return AssetModificationHook.OnWillDeleteAsset(assetName, options);
        }

        private static string[] OnWillSaveAssets(string[] paths)
        {
            foreach (string path in paths)
            {
                if (CheckAsset(path))
                {
                    AudioCodeGenerator.GenerateAudioConstants();
                    break;
                }
            }

            return paths;
        }

        private static bool CheckAsset(string assetPath)
        {
            if (assetPath.Contains(AudioCodeGenerator.SoundEffectsPath) && Path.GetExtension(assetPath) == ".asset")
            {
                return true;
            }

            return false;
        }
    }
}