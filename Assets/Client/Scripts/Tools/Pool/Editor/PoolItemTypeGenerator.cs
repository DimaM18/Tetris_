using System.IO;
using System.Text;

using Client.Scripts.Tools.Constants;

using UnityEditor;

using UnityEngine;


namespace Client.Scripts.Tools.Pool.Editor
{
    public static class PoolItemTypeGenerator
    {
        [MenuItem("Utils/Generate Pool Item Type Constants")]
        public static void GenerateConstants()
        {
            string header = @"// Generated by PoolItemTypeGenerator, don't change
namespace Client.Scripts.Tools.Pool
{
    public static class PoolItemType
    {";
            string foother = @"    }
}";
            
            StringBuilder text = new StringBuilder();

            text.AppendLine(header);

            PoolConfig config = Resources.Load<PoolConfig>(ConfigPath.Pool);
            foreach (PoolConfig.PoolItemInfo itemInfo in config.PoolItemInfos)
            {
                text.AppendFormat("        public const string {0} = \"{1}\";\n", itemInfo.Type, itemInfo.Type);
            }
            
            text.Append(foother);
            
            File.WriteAllText(Path.Combine(Application.dataPath, "Client/Scripts/Tools/Pool/PoolItemType.cs"), text.ToString());
            
            AssetDatabase.Refresh();
        }
    }
    
    public class SoundEffectsAssetModificationProcessor : UnityEditor.AssetModificationProcessor
    {
        private static string[] OnWillSaveAssets(string[] paths)
        {
            foreach (string path in paths)
            {
                if (CheckAsset(path))
                {
                    PoolItemTypeGenerator.GenerateConstants();
                    break;
                }
            }

            return paths;
        }

        private static bool CheckAsset(string assetPath)
        {
            if (assetPath.Contains(ConfigPath.Pool) && Path.GetExtension(assetPath) == ".asset")
            {
                return true;
            }

            return false;
        }
    }
}